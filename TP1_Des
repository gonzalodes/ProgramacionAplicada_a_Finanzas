#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 23 12:54:54 2023

@author: gonzalodes
"""

class My_array:
    
    def __init__(self, elems, r, c, by_row):
        self.elems = elems
        self.r = r
        self.c = c
        self.by_row = by_row
        
    def get_pos(self, j, k):
        if j<0 or k<0:
            raise ValueError("Los valores ingresados estan fuera de rango")
        elif self.by_row==True:
            m = j * self.c + k
        else:
            m = k * self.r + j
        return m
    
    def get_cords(self, m):
        if m in range(self.elems):
            if self.by_row==True:
                j = m // self.c
                k = m % self.c
                
            else:
                k = m // self.r
                j = m % self.r
                
            return (j, k)
        else:
            raise ValueError("Value 'm' is out of range")
            
    def switch(self):
        new_elems = self.elems.copy()
        new_by_row = not self.by_row
        return My_array(new_elems, self.r, self.c, new_by_row)
        
    
    def get_elem(self,coordenadas):
        j,k = coordenadas
        m = self.get_pos(j, k)
        elemento = self.elems[m]
        
        return elemento
    
    def get_row(self, j):
        row = []
        for i in range(self.c):
            posicion = self.get_pos(j, i)
            elemento = self.elems[posicion]
            row.append(elemento)
        return row
    
    def get_col(self, k):
        col = []
        for i in range(self.r):
            posicion = self.get_pos(i, k)
            elemento = self.elems[posicion]
            col.append(elemento)
        return col
   
    def del_row(self, j):
        if j >= self.r:
            raise ValueError("Índice de fila fuera de rango")
        elems_copy = self.elems.copy()
        del elems_copy[j*self.c:(j+1)*self.c]
        return My_array(elems_copy, self.r-1, self.c, self.by_row)

    def del_col(self, k):
        if k >= self.c:
            raise ValueError("Índice de columna fuera de rango")
        elems_copy = self.elems.copy()
        if self.by_row:
            for i in range(self.r):
                del elems_copy[i - k]
            return My_array(elems_copy, self.r, self.c-1, self.by_row)
        else:
            del elems_copy[k::self.c]
            return My_array(elems_copy, self.r, self.c-1, self.by_row)
    
    def swap_rows(self, j, k):
        elems_copy = self.elems.copy()
        if self.by_row:
            for l in range(self.c):
                pos1 = self.get_pos(j, l)
                pos2 = self.get_pos(k, l)
                elems_copy[pos1], elems_copy[pos2] = elems_copy[pos2], elems_copy[pos1]
        else:
            for l in range(self.r):
                pos1 = self.get_pos(l, j)
                pos2 = self.get_pos(l, k)
                elems_copy[pos1], elems_copy[pos2] = elems_copy[pos2], elems_copy[pos1]
        return My_array(elems_copy, self.r, self.c, self.by_row)
    
    def swap_cols(self, l, m):
        if l > self.c or m > self.c:
            raise ValueError("fuera de rango")
        elems_copy = self.elems.copy()
        for col in range(self.c):
            pos_l = self.get_pos(col, l)
            pos_m = self.get_pos(col, m)
            elems_copy[pos_l], elems_copy[pos_m] = elems_copy[pos_m], elems_copy[pos_l]
        return My_array(elems_copy, self.r, self.c, self.by_row)

        
    def scale_row(self, j, x):
        new_elems = self.elems.copy()
        for i in range(self.c):
            new_elems[j*self.c + i] = self.elems[j*self.c + i] * x
        return My_array(new_elems, self.r, self.c, self.by_row).myprint()
    
    def scale_col(self, k, y):
        new_elems = self.elems.copy()
        for i in range(self.c):
            new_elems[i*self.c + k] = self.elems[i*self.c + k] * y
        return My_array(new_elems, self.r, self.c, self.by_row).myprint()
    
    def flip_rows(self):
        elems_copy = self.elems.copy()
        for i in range(self.r // 2):
            elems_copy[i*self.c:(i+1)*self.c], elems_copy[(self.r-i-1)*self.c:(self.r-i)*self.c] = \
                elems_copy[(self.r-i-1)*self.c:(self.r-i)*self.c], elems_copy[i*self.c:(i+1)*self.c]
        return My_array(elems_copy, self.r, self.c, self.by_row)
       

    
    def flip_cols(self):
        elems_copy = self.elems.copy()
        for i in range(self.r):
            elems_copy[i*self.c : (i+1)*self.c] = elems_copy[i*self.c : (i+1)*self.c][::-1]
        return My_array(elems_copy, self.r, self.c, self.by_row)
    
    def transpose(self):
        return self.switch()
    
    def det(self):
        if self.r != self.c:
            raise ValueError("La matriz no es cuadrada.")
        if self.r == 1: 
            return self.elems[0]
        elif self.r == 2:
            return self.elems[0] * self.elems[3] - self.elems[1] * self.elems[2]
        
        det_value = 0 
        sign = 1 
        
        for j in range(self.c):
            submatrix = []
            for i in range(1, self.r):
                for k in range(self.c):
                    if k != j:
                        submatrix.append(self.elems[i*self.c + k])
            
                        
            submatrix_det = My_array(submatrix, self.r-1, self.c-1, self.by_row).det()
            det_value += self.elems[j] * submatrix_det * sign
            sign = -sign
        
        return det_value
    
    
    def myprint(self):
        print('\n')
        for k in range(0,self.r):
            print(self.get_row(k))
        print('\n')
        return None                                                                                                              
                
        
r = 3
c = 3
by_row = True
elems = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    
matriz = My_array(elems, r, c, by_row)
matriz.myprint()
print(matriz.det())
matriz.swap_cols(1, 2).myprint()
